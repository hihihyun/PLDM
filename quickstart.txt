# 🚀 빠른 시작 가이드

## 📋 요약

이 프로젝트는 **Water-Net 전처리 + VAE + Diffusion Model**을 결합한 수중 이미지 향상 모델입니다.

## ⚡ 1분 설정

### 1. 기본 설정
```bash
# 1. 패키지 설치
pip install -r requirements.txt

# 2. 전체 환경 자동 설정 (테스트 데이터 포함)
python setup_dataset.py --dataset test --test_samples 50

# 3. 데모 실행으로 모든 것이 작동하는지 확인
python demo.py --demo all
```

**끝!** 🎉 이제 모델이 작동합니다!

---

## 🎯 데이터를 어디에 넣어야 하나요?

### 📁 데이터 위치
```
underwater-image-enhancement/
├── DATA/                     # 👈 여기에 모든 데이터셋!
│   ├── UIEB/                # UIEB 데이터셋
│   │   ├── raw-890/         # 저하된 이미지들
│   │   ├── reference-890/   # 개선된 이미지들
│   │   └── challengingset-60/ # 테스트 이미지들
│   └── LSUI/                # LSUI 데이터셋  
│       ├── input/           # 입력 이미지들
│       └── GT/              # Ground Truth 이미지들
├── models/
├── train.py
└── ...
```

### 🎨 테스트용 데이터 생성 (실제 데이터 없을 때)
```bash
# 50개의 합성 수중 이미지 생성
python create_test_data.py --dataset_type UIEB --num_samples 50

# 데이터가 제대로 생성되었는지 확인
python check_dataset.py --dataset_type UIEB --report
```

### 📥 실제 데이터셋 다운로드
- **UIEB**: [공식 페이지](https://li-chongyi.github.io/proj_benchmark.html)
- **LSUI**: [GitHub](https://github.com/dalabdune/LSUI)

---

## 🏃‍♂️ 바로 사용하기

### 1. 데모 실행
```bash
# 전체 기능 데모
python demo.py --demo all

# 단일 이미지 향상 (이미지가 있는 경우)
python demo.py --demo image --image your_underwater_image.jpg --output enhanced.jpg
```

### 2. 훈련 시작
```bash
# UIEB 데이터셋으로 훈련
python train.py --config configs/uieb.yaml --exp_name my_experiment

# 빠른 테스트 (lightweight 모델)
python train.py --config configs/lightweight.yaml --exp_name quick_test
```

### 3. 테스트
```bash
# 단일 이미지 테스트
python test.py --mode single \
    --model_path experiments/my_experiment/checkpoints/best_model.pth \
    --input_image test.jpg \
    --output_image enhanced.jpg

# 여러 이미지 배치 테스트
python test.py --mode batch \
    --model_path experiments/my_experiment/checkpoints/best_model.pth \
    --input_dir ./test_images/ \
    --output_dir ./enhanced_images/
```

### 4. Python 코드에서 사용
```python
from models import UnderwaterEnhancementModel
from PIL import Image
import torchvision.transforms as transforms

# 모델 로드
model = UnderwaterEnhancementModel('path/to/checkpoint.pth')

# 이미지 로드 및 변환
image = Image.open('underwater_image.jpg')
transform = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.ToTensor()
])
image_tensor = transform(image).unsqueeze(0)

# 이미지 향상
enhanced = model.enhance_image(image_tensor, num_steps=50)

# 결과 저장
enhanced_pil = transforms.ToPILImage()(enhanced.squeeze(0))
enhanced_pil.save('enhanced_result.jpg')
```

---

## 🛠️ 설정 옵션

### 모델 설정
```python
# config.py에서 또는 YAML 파일로
config = {
    'model': {
        'img_size': 256,        # 이미지 크기
        'base_channels': 128,   # 모델 크기 (64=가벼움, 192=고품질)
        'time_steps': 1000,     # Diffusion 스텝 (500=빠름, 2000=고품질)
    },
    'training': {
        'batch_size': 8,        # 배치 크기 (GPU 메모리에 따라 조정)
        'num_epochs': 1000,     # 훈련 에포크
        'vae_lr': 1e-4,         # VAE 학습률
        'diffusion_lr': 1e-4,   # Diffusion 학습률
    }
}
```

### 사전 정의된 설정
```bash
# 가벼운 모델 (빠른 훈련/추론)
python train.py --config configs/lightweight.yaml

# 고품질 모델 (최고 결과)
python train.py --config configs/high_quality.yaml

# UIEB 최적화
python train.py --config configs/uieb.yaml

# LSUI 최적화
python train.py --config configs/lsui.yaml
```

---

## 🔧 문제 해결

### Q: 데이터셋을 찾을 수 없다고 나와요
```bash
# 데이터 구조 확인
python check_dataset.py --dataset_type UIEB --report

# 테스트 데이터 생성
python create_test_data.py --dataset_type UIEB --num_samples 20
```

### Q: GPU 메모리 부족 오류
```python
# config에서 배치 크기 줄이기
config['data']['batch_size'] = 4  # 기본값 8에서 4로

# 또는 가벼운 모델 사용
python train.py --config configs/lightweight.yaml
```

### Q: 훈련이 너무 오래 걸려요
```bash
# 빠른 테스트를 위해
python train.py --config configs/lightweight.yaml --exp_name quick_test

# 또는 에포크 수 줄이기 (config 파일에서 num_epochs 변경)
```

### Q: 결과가 만족스럽지 않아요
```bash
# 더 많은 스텝으로 생성
python test.py --num_steps 100  # 기본값 50에서 100으로

# 고품질 모델 사용
python train.py --config configs/high_quality.yaml
```

---

## 📊 예상 성능

### 훈련 시간 (RTX 3090 기준)
- **Lightweight**: ~6시간 (100 에포크)
- **Default**: ~12시간 (500 에포크)  
- **High Quality**: ~24시간 (1000 에포크)

### 추론 시간
- **10 steps**: ~1초/이미지
- **50 steps**: ~3초/이미지
- **100 steps**: ~6초/이미지

### 메모리 사용량
- **Lightweight**: ~6GB GPU 메모리
- **Default**: ~10GB GPU 메모리
- **High Quality**: ~16GB GPU 메모리

---

## 🎨 예시 결과

모델은 다음과 같은 수중 이미지 문제들을 해결합니다:

1. **색상 복원**: 푸른빛/녹색빛 제거, 자연스러운 색상 복원
2. **대비 향상**: 흐릿한 이미지를 선명하게
3. **세부 사항 복원**: 물의 산란으로 손실된 디테일 복구
4. **조명 개선**: 어두운 수중 환경의 밝기 조정

---

## 📞 지원

- 🐛 **버그 리포트**: GitHub Issues
- 📖 **자세한 문서**: README.md, DATA_SETUP.md  
- 🔍 **데이터 문제**: `python check_dataset.py --help`
- 🎯 **모델 문제**: `python demo.py --demo model`

---

## 🚀 다음 단계

1. **데모 실행**: `python demo.py --demo all`
2. **테스트 데이터로 훈련**: `python train.py --config configs/lightweight.yaml`
3. **실제 데이터 준비**: UIEB/LSUI 다운로드
4. **본격 훈련**: 고품질 모델로 전체 데이터셋 훈련
5. **결과 분석**: TensorBoard로 훈련 과정 모니터링

**행운을 빕니다!** 🌊✨