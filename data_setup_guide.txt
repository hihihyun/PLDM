# 📁 데이터셋 설정 가이드

## 🎯 데이터 위치

프로젝트 루트 디렉토리에 `DATA` 폴더를 생성하고 다음과 같이 구성하세요:

```
underwater-image-enhancement/
├── DATA/                     # 📁 메인 데이터 폴더 (여기에 모든 데이터셋 저장)
│   ├── UIEB/                # 📁 UIEB 데이터셋
│   │   ├── raw-890/         # 🖼️ 훈련용 저하된 이미지들 (890장)
│   │   ├── reference-890/   # 🖼️ 훈련용 개선된 이미지들 (890장)  
│   │   └── challengingset-60/ # 🖼️ 테스트용 이미지들 (60장)
│   ├── LSUI/                # 📁 LSUI 데이터셋
│   │   ├── input/           # 🖼️ 입력 이미지들
│   │   └── GT/              # 🖼️ Ground Truth 이미지들
│   └── custom/              # 📁 사용자 정의 데이터셋 (선택사항)
├── models/
├── train.py
└── ...
```

## 📥 UIEB 데이터셋 다운로드

### 방법 1: 직접 다운로드
1. **공식 링크**: [UIEB Dataset](https://li-chongyi.github.io/proj_benchmark.html)
2. **Google Drive**: [UIEB Download](https://drive.google.com/drive/folders/1BVozhoEp4l_E7k4SAmtCKpTTsZLaK9xO)

### 방법 2: 스크립트로 자동 다운로드
```bash
# UIEB 데이터셋 다운로드 스크립트 실행
python scripts/download_uieb.py
```

### UIEB 구조 설명
- `raw-890/`: 물속에서 촬영된 원본 저하 이미지 890장
- `reference-890/`: 전문가가 수동으로 개선한 참조 이미지 890장  
- `challengingset-60/`: 테스트용 어려운 이미지 60장

## 📥 LSUI 데이터셋 다운로드

### 공식 링크
- **논문**: [Large-scale Underwater Image Dataset](https://ieeexplore.ieee.org/document/9001231)
- **다운로드**: [LSUI Dataset](https://github.com/dalabdune/LSUI)

### LSUI 구조 설명
- `input/`: 수중에서 촬영된 입력 이미지들
- `GT/`: Ground Truth (개선된) 이미지들

## 🛠️ 자동 데이터셋 설정 스크립트

편의를 위해 자동 설정 스크립트를 제공합니다:

```bash
# 데이터셋 설정 스크립트 실행
python setup_dataset.py --dataset UIEB --download_path ./downloads
```

## 📝 사용자 정의 데이터셋

자신만의 데이터셋을 사용하려면:

### 1. 폴더 구조 생성
```
DATA/
└── custom/
    ├── train/
    │   ├── degraded/     # 저하된 이미지들
    │   └── enhanced/     # 개선된 이미지들 (Ground Truth)
    ├── val/
    │   ├── degraded/
    │   └── enhanced/
    └── test/
        ├── degraded/
        └── enhanced/     # 없어도 됨 (테스트만 하는 경우)
```

### 2. 설정 파일 수정
```python
# config.py에서 데이터 경로 설정
config = {
    'data': {
        'data_root': './DATA',
        'dataset_type': 'custom',  # 'UIEB', 'LSUI', 또는 'custom'
        'custom_degraded_dir': 'custom/train/degraded',
        'custom_enhanced_dir': 'custom/train/enhanced'
    }
}
```

## 🔍 데이터 확인 방법

### 1. 데이터셋 구조 확인
```bash
# 데이터셋이 올바르게 설정되었는지 확인
python check_dataset.py --dataset_type UIEB --data_root ./DATA
```

### 2. 샘플 이미지 확인
```python
from data import UnderwaterDataset

# 데이터셋 로드 테스트
dataset = UnderwaterDataset(
    root_dir='./DATA',
    dataset_type='UIEB',
    split='train'
)

print(f"데이터셋 크기: {len(dataset)}")

# 첫 번째 샘플 확인
sample = dataset[0]
print("샘플 키들:", sample.keys())
```

## ⚡ 빠른 테스트 데이터

전체 데이터셋 다운로드 전에 테스트하려면:

### 1. 작은 샘플 데이터 생성
```bash
# 작은 테스트 데이터셋 생성 (각 폴더에 10장씩)
python create_test_data.py --num_samples 10
```

### 2. 무료 수중 이미지 다운로드
- **Unsplash**: [무료 수중 이미지](https://unsplash.com/s/photos/underwater)
- **Pexels**: [수중 사진](https://www.pexels.com/search/underwater/)

## 🚨 주의사항

### 1. 파일 이름 매칭
- 저하된 이미지와 개선된 이미지의 파일 이름이 정확히 일치해야 합니다
- 예: `image001.jpg` (degraded) ↔ `image001.jpg` (enhanced)

### 2. 지원 형식
- **이미지 형식**: `.jpg`, `.jpeg`, `.png`, `.bmp`, `.tiff`
- **권장 해상도**: 256x256 이상 (자동으로 리사이즈됨)

### 3. 디스크 공간
- **UIEB**: 약 2GB
- **LSUI**: 약 15GB
- **충분한 저장 공간 확보 필요**

## 📊 데이터 전처리 확인

### 1. 전처리 테스트
```python
from models.water_physics import WaterNetPreprocessor
import torch

# 전처리 테스트
preprocessor = WaterNetPreprocessor()
dummy_image = torch.rand(1, 3, 256, 256)
preprocessed = preprocessor.preprocess_batch(dummy_image)
print(f"전처리 결과 크기: {preprocessed.shape}")  # [1, 9, 256, 256] 이어야 함
```

### 2. 데이터 로딩 속도 확인
```python
from torch.utils.data import DataLoader
from data import UnderwaterDataset

dataset = UnderwaterDataset('./DATA', 'UIEB', 'train')
loader = DataLoader(dataset, batch_size=4, num_workers=4)

import time
start = time.time()
for i, batch in enumerate(loader):
    if i >= 10:  # 10개 배치만 테스트
        break
end = time.time()

print(f"배치 로딩 속도: {(end-start)/10:.3f}s per batch")
```

## 🆘 문제 해결

### 1. 데이터셋을 찾을 수 없는 경우
```bash
FileNotFoundError: [Errno 2] No such file or directory: './DATA/UIEB/raw-890'
```
**해결방법**: 데이터 폴더 구조를 다시 확인하고 올바른 위치에 데이터가 있는지 확인

### 2. 이미지 쌍이 맞지 않는 경우
```bash
Warning: No enhanced version found for image001.jpg
```
**해결방법**: 저하된 이미지와 개선된 이미지의 파일 이름이 정확히 일치하는지 확인

### 3. 메모리 부족 오류
```bash
RuntimeError: CUDA out of memory
```
**해결방법**: 배치 크기를 줄이거나 이미지 해상도를 낮춤

## 📞 추가 지원

문제가 발생하면:
1. `check_dataset.py` 스크립트 실행
2. 에러 로그와 함께 이슈 등록
3. 데이터 폴더 구조 스크린샷 첨부